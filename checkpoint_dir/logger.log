	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=8, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=1, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=1, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 768])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 768])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([768, 768])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([3072, 768])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([3072])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([768, 3072])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([768])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([768])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 768, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 768)
        (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-11): 12 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=768, out_features=768, bias=True)
              (v_proj): Linear(in_features=768, out_features=768, bias=True)
              (q_proj): Linear(in_features=768, out_features=768, bias=True)
              (out_proj): Linear(in_features=768, out_features=768, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=768, out_features=3072, bias=True)
            (fc2): Linear(in_features=3072, out_features=768, bias=True)
            (final_layer_norm): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=768, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=128, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=128, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
Epoch [0/16]; Iter [0/128]; loss 5.2448; gen_loss 5.2448; LR 1.00e-06; Iter time 4.52s; ETA 0:09:39; Mem 26745.31MB
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=128, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=128, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 2048])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 2048])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.8.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.8.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.8.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.8.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.8.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.9.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.9.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.9.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.9.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.9.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.10.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.10.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.10.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.10.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.10.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.11.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.11.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.11.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.11.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.11.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.12.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.12.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.12.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.12.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.12.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.13.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.13.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.13.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.13.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.13.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.14.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.14.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.14.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.14.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.14.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.15.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.15.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.15.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.15.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.15.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.16.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.16.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.16.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.16.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.16.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.17.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.17.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.17.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.17.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.17.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.18.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.18.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.18.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.18.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.18.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.19.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.19.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.19.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.19.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.19.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.20.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.20.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.20.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.20.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.20.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.21.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.21.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.21.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.21.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.21.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.22.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.22.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.22.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.22.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.22.final_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.k_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.v_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.q_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.weight:	torch.Size([2048, 2048])
	[train]	transformer.model.decoder.layers.23.self_attn.out_proj.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.self_attn_layer_norm.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.fc1.weight:	torch.Size([8192, 2048])
	[train]	transformer.model.decoder.layers.23.fc1.bias:	torch.Size([8192])
	[train]	transformer.model.decoder.layers.23.fc2.weight:	torch.Size([2048, 8192])
	[train]	transformer.model.decoder.layers.23.fc2.bias:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.weight:	torch.Size([2048])
	[train]	transformer.model.decoder.layers.23.final_layer_norm.bias:	torch.Size([2048])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='intra', augment=False, n_discrete_size=128, n_max_triangles=128, model='mesh_xl', llm='facebook/opt-1.3b', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=4, batchsize_per_gpu=1, start_epoch=0, max_epoch=16, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='checkpoint_dir', save_every=20000, log_every=10)
MeshXL(
  (tokenizer): MeshTokenizer()
  (transformer): OPTForCausalLM(
    (model): OPTModel(
      (decoder): OPTDecoder(
        (embed_tokens): Embedding(131, 2048, padding_idx=130)
        (embed_positions): OPTLearnedPositionalEmbedding(8194, 2048)
        (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
        (layers): ModuleList(
          (0-23): 24 x OPTDecoderLayer(
            (self_attn): OPTAttentionLayerBetterTransformer(
              (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
              (out_proj): Linear(in_features=2048, out_features=2048, bias=True)
            )
            (activation_fn): ReLU()
            (self_attn_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
            (fc1): Linear(in_features=2048, out_features=8192, bias=True)
            (fc2): Linear(in_features=8192, out_features=2048, bias=True)
            (final_layer_norm): LayerNorm((2048,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (lm_head): Linear(in_features=2048, out_features=131, bias=False)
  )
)
